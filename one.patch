Index: compiler/loco/include/loco/IR/NodeMixins.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/compiler/loco/include/loco/IR/NodeMixins.h b/compiler/loco/include/loco/IR/NodeMixins.h
--- a/compiler/loco/include/loco/IR/NodeMixins.h	(revision b4012713e79ac9809a9ea227c7b226da281b7dd2)
+++ b/compiler/loco/include/loco/IR/NodeMixins.h	(revision 0485ef1012f578cfdd0a56c6e55ece4ea886db9f)
@@ -99,7 +99,7 @@
     virtual ~Mixin() = default;
 
   public:
-    unsigned arity(void) const final { return N; }
+      uint32_t arity(void) const final { return N; }
 
     Node *arg(uint32_t n) const final { return _args.at(n)->node(); }
 
Index: compiler/luci-interpreter/src/CMakeLists.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/compiler/luci-interpreter/src/CMakeLists.txt b/compiler/luci-interpreter/src/CMakeLists.txt
--- a/compiler/luci-interpreter/src/CMakeLists.txt	(revision b4012713e79ac9809a9ea227c7b226da281b7dd2)
+++ b/compiler/luci-interpreter/src/CMakeLists.txt	(revision 0485ef1012f578cfdd0a56c6e55ece4ea886db9f)
@@ -1,27 +1,27 @@
-nnas_find_package(TensorFlowSource EXACT 2.3.0 QUIET)
-nnas_find_package(TensorFlowGEMMLowpSource EXACT 2.3.0 QUIET)
-nnas_find_package(TensorFlowEigenSource EXACT 2.3.0 QUIET)
-nnas_find_package(TensorFlowRuySource EXACT 2.3.0 QUIET)
-
-if (NOT TensorFlowSource_FOUND)
-  message(STATUS "Skipping luci-interpreter: TensorFlow not found")
-  return()
-endif ()
-
-if (NOT TensorFlowGEMMLowpSource_FOUND)
-  message(STATUS "Skipping luci-interpreter: gemmlowp not found")
-  return()
-endif ()
-
-if (NOT TensorFlowEigenSource_FOUND)
-  message(STATUS "Skipping luci-interpreter: Eigen not found")
-  return()
-endif ()
-
-if (NOT TensorFlowRuySource_FOUND)
-  message(STATUS "Skipping luci-interpreter: Ruy not found")
-  return()
-endif ()
+#nnas_find_package(TensorFlowSource EXACT 2.3.0 QUIET)
+#nnas_find_package(TensorFlowGEMMLowpSource EXACT 2.3.0 QUIET)
+#nnas_find_package(TensorFlowEigenSource EXACT 2.3.0 QUIET)
+#nnas_find_package(TensorFlowRuySource EXACT 2.3.0 QUIET)
+#
+#if (NOT TensorFlowSource_FOUND)
+#  message(STATUS "Skipping luci-interpreter: TensorFlow not found")
+#  return()
+#endif ()
+#
+#if (NOT TensorFlowGEMMLowpSource_FOUND)
+#  message(STATUS "Skipping luci-interpreter: gemmlowp not found")
+#  return()
+#endif ()
+#
+#if (NOT TensorFlowEigenSource_FOUND)
+#  message(STATUS "Skipping luci-interpreter: Eigen not found")
+#  return()
+#endif ()
+#
+#if (NOT TensorFlowRuySource_FOUND)
+#  message(STATUS "Skipping luci-interpreter: Ruy not found")
+#  return()
+#endif ()
 
 add_subdirectory(core)
 add_subdirectory(kernels)
@@ -31,7 +31,7 @@
     "${LUCI_INTERPRETER_INCLUDE_DIR}/luci_interpreter/Interpreter.h"
     Interpreter.cpp)
 
-add_library(luci_interpreter SHARED ${SOURCES})
+add_library(luci_interpreter STATIC ${SOURCES})
 target_include_directories(luci_interpreter PUBLIC "${LUCI_INTERPRETER_INCLUDE_DIR}")
 target_include_directories(luci_interpreter PRIVATE "${LUCI_INTERPRETER_SOURCE_DIR}")
 target_link_libraries(luci_interpreter
Index: compiler/luci-interpreter/src/kernels/CMakeLists.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/compiler/luci-interpreter/src/kernels/CMakeLists.txt b/compiler/luci-interpreter/src/kernels/CMakeLists.txt
--- a/compiler/luci-interpreter/src/kernels/CMakeLists.txt	(revision b4012713e79ac9809a9ea227c7b226da281b7dd2)
+++ b/compiler/luci-interpreter/src/kernels/CMakeLists.txt	(revision 2b8c9390b8fcca03edc159395560ae315432b401)
@@ -1,136 +1,135 @@
-find_package(Threads REQUIRED)
-
 set(SOURCES
     Add.h
     Add.cpp
-    ArgMax.h
-    ArgMax.cpp
-    AveragePool2D.h
-    AveragePool2D.cpp
-    BatchToSpaceND.h
-    BatchToSpaceND.cpp
-    Concatenation.h
-    Concatenation.cpp
-    Conv2D.h
-    Conv2D.cpp
-    DepthToSpace.h
-    DepthToSpace.cpp
-    DepthwiseConv2D.h
-    DepthwiseConv2D.cpp
-    Div.h
-    Div.cpp
-    Elu.h
-    Elu.cpp
-    Exp.h
-    Exp.cpp
-    Floor.h
-    Floor.cpp
-    FloorDiv.h
-    FloorDiv.cpp
-    Equal.h
-    Equal.cpp
-    FullyConnected.h
-    FullyConnected.cpp
-    Greater.h
-    Greater.cpp
-    GreaterEqual.h
-    GreaterEqual.cpp
-    If.h
-    If.cpp
-    InstanceNorm.h
-    InstanceNorm.cpp
-    L2Normalize.h
-    L2Normalize.cpp
-    L2Pool2D.h
-    L2Pool2D.cpp
-    LeakyRelu.h
-    LeakyRelu.cpp
-    Less.h
-    Less.cpp
-    LessEqual.h
-    LessEqual.cpp
-    LocalResponseNormalization.h
-    LocalResponseNormalization.cpp
-    LogicalAnd.h
-    LogicalAnd.cpp
-    LogicalNot.h
-    LogicalNot.cpp
-    LogicalOr.h
-    LogicalOr.cpp
-    Logistic.h
-    Logistic.cpp
-    LogSoftmax.h
-    LogSoftmax.cpp
-    Maximum.h
-    Maximum.cpp
-    MaxPool2D.h
-    MaxPool2D.cpp
-    Mean.h
-    Mean.cpp
-    Minimum.h
-    Minimum.cpp
-    MirrorPad.h
-    MirrorPad.cpp
-    Mul.h
-    Mul.cpp
-    Neg.h
-    Neg.cpp
-    NotEqual.h
-    NotEqual.cpp
-    Pack.h
-    Pack.cpp
-    Pad.h
-    Pad.cpp
-    PadV2.h
-    PadV2.cpp
-    Pow.h
-    Pow.cpp
-    Prelu.h
-    Prelu.cpp
-    Relu.h
-    Relu.cpp
-    Relu6.h
-    Relu6.cpp
-    Reshape.h
-    Reshape.cpp
-    ResizeBilinear.h
-    ResizeBilinear.cpp
-    ResizeNearestNeighbor.h
-    ResizeNearestNeighbor.cpp
-    Reverse.h
-    Reverse.cpp
-    Rsqrt.h
-    Rsqrt.cpp
-    Slice.h
-    Slice.cpp
-    Softmax.h
-    Softmax.cpp
-    SpaceToBatchND.h
-    SpaceToBatchND.cpp
-    SpaceToDepth.h
-    SpaceToDepth.cpp
-    Split.h
-    Split.cpp
-    StridedSlice.h
-    StridedSlice.cpp
-    Sqrt.h
-    Sqrt.cpp
-    Square.h
-    Square.cpp
-    SquaredDifference.h
-    SquaredDifference.cpp
-    Squeeze.h
-    Squeeze.cpp
-    Sub.h
-    Sub.cpp
-    Tanh.h
-    Tanh.cpp
-    Transpose.h
-    Transpose.cpp
-    TransposeConv.h
-    TransposeConv.cpp
-    Unpack.h
-    Unpack.cpp)
+#    ArgMax.h
+#    ArgMax.cpp
+#    AveragePool2D.h
+#    AveragePool2D.cpp
+#    BatchToSpaceND.h
+#    BatchToSpaceND.cpp
+#    Concatenation.h
+#    Concatenation.cpp
+#    Conv2D.h
+#    Conv2D.cpp
+#    DepthToSpace.h
+#    DepthToSpace.cpp
+#    DepthwiseConv2D.h
+#    DepthwiseConv2D.cpp
+#    Div.h
+#    Div.cpp
+#    Elu.h
+#    Elu.cpp
+#    Exp.h
+#    Exp.cpp
+#    Floor.h
+#    Floor.cpp
+#    FloorDiv.h
+#    FloorDiv.cpp
+#    Equal.h
+#    Equal.cpp
+#    FullyConnected.h
+#    FullyConnected.cpp
+#    Greater.h
+#    Greater.cpp
+#    GreaterEqual.h
+#    GreaterEqual.cpp
+#    If.h
+#    If.cpp
+#    InstanceNorm.h
+#    InstanceNorm.cpp
+#    L2Normalize.h
+#    L2Normalize.cpp
+#    L2Pool2D.h
+#    L2Pool2D.cpp
+#    LeakyRelu.h
+#    LeakyRelu.cpp
+#    Less.h
+#    Less.cpp
+#    LessEqual.h
+#    LessEqual.cpp
+#    LocalResponseNormalization.h
+#    LocalResponseNormalization.cpp
+#    LogicalAnd.h
+#    LogicalAnd.cpp
+#    LogicalNot.h
+#    LogicalNot.cpp
+#    LogicalOr.h
+#    LogicalOr.cpp
+#    Logistic.h
+#    Logistic.cpp
+#    LogSoftmax.h
+#    LogSoftmax.cpp
+#    Maximum.h
+#    Maximum.cpp
+#    MaxPool2D.h
+#    MaxPool2D.cpp
+#    Mean.h
+#    Mean.cpp
+#    Minimum.h
+#    Minimum.cpp
+#    MirrorPad.h
+#    MirrorPad.cpp
+#    Mul.h
+#    Mul.cpp
+#    Neg.h
+#    Neg.cpp
+#    NotEqual.h
+#    NotEqual.cpp
+#    Pack.h
+#    Pack.cpp
+#    Pad.h
+#    Pad.cpp
+#    PadV2.h
+#    PadV2.cpp
+#    Pow.h
+#    Pow.cpp
+#    Prelu.h
+#    Prelu.cpp
+#    Relu.h
+#    Relu.cpp
+#    Relu6.h
+#    Relu6.cpp
+#    Reshape.h
+#    Reshape.cpp
+#    ResizeBilinear.h
+#    ResizeBilinear.cpp
+#    ResizeNearestNeighbor.h
+#    ResizeNearestNeighbor.cpp
+#    Reverse.h
+#    Reverse.cpp
+#    Rsqrt.h
+#    Rsqrt.cpp
+#    Slice.h
+#    Slice.cpp
+#    Softmax.h
+#    Softmax.cpp
+#    SpaceToBatchND.h
+#    SpaceToBatchND.cpp
+#    SpaceToDepth.h
+#    SpaceToDepth.cpp
+#    Split.h
+#    Split.cpp
+#    StridedSlice.h
+#    StridedSlice.cpp
+#    Sqrt.h
+#    Sqrt.cpp
+#    Square.h
+#    Square.cpp
+#    SquaredDifference.h
+#    SquaredDifference.cpp
+#    Squeeze.h
+#    Squeeze.cpp
+#    Sub.h
+#    Sub.cpp
+#    Tanh.h
+#    Tanh.cpp
+#    Transpose.h
+#    Transpose.cpp
+#    TransposeConv.h
+#    TransposeConv.cpp
+#    Unpack.h
+#    Unpack.cpp
+        )
 
 list(APPEND SOURCES
     BinaryOpCommon.h
@@ -141,14 +140,14 @@
 add_library(luci_interpreter_kernels STATIC ${SOURCES})
 set_target_properties(luci_interpreter_kernels PROPERTIES POSITION_INDEPENDENT_CODE ON)
 target_include_directories(luci_interpreter_kernels PUBLIC ${LUCI_INTERPRETER_SOURCE_DIR})
+
 target_include_directories(luci_interpreter_kernels SYSTEM PRIVATE
-    "${TensorFlowRuySource_DIR}"
-    "${TensorFlowGEMMLowpSource_DIR}"
-    "${TensorFlowEigenSource_DIR}"
-    "${TensorFlowSource_DIR}")
+        "${TensorFlowRuySource_DIR}"
+        "${TensorFlowGEMMLowpSource_DIR}"
+        "${TensorFlowEigenSource_DIR}"
+        "${TensorFlowSource_DIR}")
 target_link_libraries(luci_interpreter_kernels
-    PUBLIC luci_interpreter_core
-    PRIVATE nncc_common Threads::Threads)
+    PUBLIC luci_interpreter_core)
 
 if(NOT ENABLE_TEST)
   return()
Index: compiler/luci/lang/CMakeLists.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/compiler/luci/lang/CMakeLists.txt b/compiler/luci/lang/CMakeLists.txt
--- a/compiler/luci/lang/CMakeLists.txt	(revision b4012713e79ac9809a9ea227c7b226da281b7dd2)
+++ b/compiler/luci/lang/CMakeLists.txt	(revision 0485ef1012f578cfdd0a56c6e55ece4ea886db9f)
@@ -2,7 +2,7 @@
 file(GLOB_RECURSE TESTS "src/*.test.cpp")
 list(REMOVE_ITEM SOURCES ${TESTS})
 
-add_library(luci_lang SHARED ${SOURCES})
+add_library(luci_lang STATIC ${SOURCES})
 target_include_directories(luci_lang PRIVATE src)
 target_include_directories(luci_lang PUBLIC include)
 target_link_libraries(luci_lang PUBLIC loco)
Index: compiler/luci/lang/include/luci/IR/CircleNodeMixins.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/compiler/luci/lang/include/luci/IR/CircleNodeMixins.h b/compiler/luci/lang/include/luci/IR/CircleNodeMixins.h
--- a/compiler/luci/lang/include/luci/IR/CircleNodeMixins.h	(revision b4012713e79ac9809a9ea227c7b226da281b7dd2)
+++ b/compiler/luci/lang/include/luci/IR/CircleNodeMixins.h	(revision 0485ef1012f578cfdd0a56c6e55ece4ea886db9f)
@@ -82,7 +82,7 @@
   virtual ~FixedArityNode() = default;
 
 public:
-  unsigned arity(void) const final { return N; }
+    uint32_t arity(void) const final { return N; }
 
   loco::Node *arg(uint32_t n) const final { return _args.at(n)->node(); }
 
Index: compiler/luci/log/CMakeLists.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/compiler/luci/log/CMakeLists.txt b/compiler/luci/log/CMakeLists.txt
--- a/compiler/luci/log/CMakeLists.txt	(revision b4012713e79ac9809a9ea227c7b226da281b7dd2)
+++ b/compiler/luci/log/CMakeLists.txt	(revision 0485ef1012f578cfdd0a56c6e55ece4ea886db9f)
@@ -1,7 +1,7 @@
 # TODO Find how to test logging framework
 file(GLOB_RECURSE SOURCES "src/*.cpp")
 
-add_library(luci_log SHARED ${SOURCES})
+add_library(luci_log STATIC ${SOURCES})
 target_include_directories(luci_log PUBLIC include)
 target_link_libraries(luci_log PUBLIC hermes)
 target_link_libraries(luci_log PRIVATE hermes_std)
Index: infra/nncc/CMakeLists.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/infra/nncc/CMakeLists.txt b/infra/nncc/CMakeLists.txt
--- a/infra/nncc/CMakeLists.txt	(revision b4012713e79ac9809a9ea227c7b226da281b7dd2)
+++ b/infra/nncc/CMakeLists.txt	(revision 0485ef1012f578cfdd0a56c6e55ece4ea886db9f)
@@ -1,155 +1,155 @@
-cmake_minimum_required(VERSION 3.1)
-
-project(nncc)
-
-enable_testing()
-
-set(CMAKE_CXX_STANDARD 14)
-
-set(CMAKE_SKIP_BUILD_RPATH FALSE)
-set(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE)
-set(CMAKE_INSTALL_RPATH "$ORIGIN/../lib:$ORIGIN/")
-set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
-
-# This feature works with CMake 3.5.2 or later. However, using previous versions does not produce
-# an error. We are still officially using CMake 3.1.0, but put this code for the sake of semantic
-# support in various development tools.
-# Todo: Someday, CMake needs to be updated to 3.7.2 or later to take advantage of improvements
-#       such as `cmake-server`.
-set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
-
-set(NNAS_PROJECT_SOURCE_DIR "${CMAKE_CURRENT_LIST_DIR}/../.." CACHE
-  INTERNAL "Where to find nnas top-level source directory"
-)
-
-set(NNAS_EXTERNALS_DIR
-  "${NNAS_PROJECT_SOURCE_DIR}/externals" CACHE
-  INTERNAL "Where to download external dependencies"
-)
-set(NNCC_OVERLAY_DIR "${CMAKE_BINARY_DIR}/overlay" CACHE
-    INTERNAL "Where locally built external dependencies are installed")
-
-# Share package build script with runtime
-set(EXT_OVERLAY_DIR ${NNCC_OVERLAY_DIR})
-
-# This allows find_package to access configurations installed inside overlay
-list(APPEND CMAKE_PREFIX_PATH "${EXT_OVERLAY_DIR}")
-
-macro(nnas_include PREFIX)
-  include("${NNAS_PROJECT_SOURCE_DIR}/infra/cmake/modules/${PREFIX}.cmake")
-endmacro(nnas_include)
-
-macro(nnas_find_package PREFIX)
-  find_package(${PREFIX} CONFIG NO_DEFAULT_PATH
-    PATHS ${NNAS_PROJECT_SOURCE_DIR}/infra/cmake/packages
-    ${ARGN}
-  )
-endmacro(nnas_find_package)
-
-# nncc_find_resource(NAME) will update the following variables
+#cmake_minimum_required(VERSION 3.1)
+#
+#project(nncc)
+#
+#enable_testing()
+#
+#set(CMAKE_CXX_STANDARD 14)
+#
+#set(CMAKE_SKIP_BUILD_RPATH FALSE)
+#set(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE)
+#set(CMAKE_INSTALL_RPATH "$ORIGIN/../lib:$ORIGIN/")
+#set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
 #
-#   NAME_FOUND
-#   NAME_DIR
+## This feature works with CMake 3.5.2 or later. However, using previous versions does not produce
+## an error. We are still officially using CMake 3.1.0, but put this code for the sake of semantic
+## support in various development tools.
+## Todo: Someday, CMake needs to be updated to 3.7.2 or later to take advantage of improvements
+##       such as `cmake-server`.
+#set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
 #
-# TODO Explain how to add a resource in README.md
-function(nncc_find_resource NAME)
-  set(RESOURCE_DIR "${NNAS_PROJECT_SOURCE_DIR}/res/${NAME}")
-
-  if(NOT IS_DIRECTORY ${RESOURCE_DIR})
-    set(${NAME}_FOUND FALSE PARENT_SCOPE)
-    return()
-  endif(NOT IS_DIRECTORY ${RESOURCE_DIR})
-
-  set(${NAME}_DIR ${RESOURCE_DIR} PARENT_SCOPE)
-  set(${NAME}_FOUND TRUE PARENT_SCOPE)
-endfunction(nncc_find_resource)
-
-###
-### CMake configuration
-###
-if(NOT CMAKE_BUILD_TYPE)
-  set(CMAKE_BUILD_TYPE "Debug" CACHE STRING "Type of build" FORCE)
-endif(NOT CMAKE_BUILD_TYPE)
-message(STATUS "Use '${CMAKE_BUILD_TYPE}' configuration")
-
-# Prefer -pthread to -lpthread for find_package(Threads ...)
+#set(NNAS_PROJECT_SOURCE_DIR "${CMAKE_CURRENT_LIST_DIR}/../.." CACHE
+#  INTERNAL "Where to find nnas top-level source directory"
+#)
 #
-# std::thread code compiled only with -lpthread emits the following runtime error (on GCC 4.8.4)
+#set(NNAS_EXTERNALS_DIR
+#  "${NNAS_PROJECT_SOURCE_DIR}/externals" CACHE
+#  INTERNAL "Where to download external dependencies"
+#)
+#set(NNCC_OVERLAY_DIR "${CMAKE_BINARY_DIR}/overlay" CACHE
+#    INTERNAL "Where locally built external dependencies are installed")
 #
-#   terminate called after throwing an instance of 'std::system_error'
-#     what():  Enable multithreading to use std::thread: Operation not permitted
+## Share package build script with runtime
+#set(EXT_OVERLAY_DIR ${NNCC_OVERLAY_DIR})
 #
-set(THREADS_PREFER_PTHREAD_FLAG TRUE)
-
-###
-### Configuration
-###
-option(DOWNLOAD_PROTOBUF "Download Protocol Buffer source" ON)
-option(BUILD_PROTOBUF "Locally build Protocol Buffer from the downloaded source" ON)
-option(DOWNLOAD_EIGEN "Download Eigen source" ON)
-option(DOWNLOAD_FARMHASH "Download farmhash source" ON)
-option(DOWNLOAD_GEMMLOWP "Download GEMM low precesion library source" ON)
-option(DOWNLOAD_RUY "Download ruy source" ON)
-option(DOWNLOAD_NEON2SSE "Download NEON2SSE library source" ON)
-option(DOWNLOAD_GFLAGS "Download GFlags source" OFF)
-option(DOWNLOAD_FLATBUFFERS "Download FlatBuffers source" ON)
-option(BUILD_FLATBUFFERS "Locally build Flatbuffers from the downloaded source" ON)
-option(DOWNLOAD_TENSORFLOW "Download TensorFlow source" ON)
-option(DOWNLOAD_CAFFE "Download Caffe source" ON)
-option(DOWNLOAD_PYTORCH "Download Pytorch source" ON)
-option(DOWNLOAD_ONNX "Download ONNX source" ON)
-option(DOWNLOAD_ABSEIL "Download Abseil-cpp source" ON)
-option(DOWNLOAD_OPENCL_HEADERS "Download OpenCl Header source" ON)
-option(DOWNLOAD_PYBIND11 "Download Pybind11 source" ON)
-
-option(DOWNLOAD_GTEST "Download Google Test source" ON)
-option(BUILD_GTEST "Build Google Test from the downloaded source" ON)
-option(DOWNLOAD_HDF5 "Download HDF5 source" ON)
-option(BUILD_HDF5 "Build HDF5 from the downloaded source" ON)
-
-nnas_find_package(GTest QUIET)
-
-option(ENABLE_TEST "Build Tests using Google Test" ${GTest_FOUND})
-
-if(${ENABLE_TEST} AND NOT ${GTest_FOUND})
-  message(FATAL_ERROR "Google Test is required to enable test")
-endif(${ENABLE_TEST} AND NOT ${GTest_FOUND})
-
-option(ENABLE_COVERAGE "Build for coverage test" OFF)
-if(${ENABLE_COVERAGE} AND NOT ${ENABLE_TEST})
-  message(FATAL_ERROR "Test should be enabled to measure test coverage")
-endif(${ENABLE_COVERAGE} AND NOT ${ENABLE_TEST})
-
-if(${ENABLE_TEST})
-  include(CTest)
-endif(${ENABLE_TEST})
-
-option(ENABLE_STRICT_BUILD "Treat warning as error" OFF)
-
-# This option might be turned ON for Windows native build.
-# Check our ProtobufConfig.cmake for its usage.
-option(USE_PROTOBUF_LEGACY_IMPORT "Use legacy MODULE mode import rather than CONFIG mode" OFF)
-
-###
-### Target
-###
+## This allows find_package to access configurations installed inside overlay
+#list(APPEND CMAKE_PREFIX_PATH "${EXT_OVERLAY_DIR}")
+#
+#macro(nnas_include PREFIX)
+#  include("${NNAS_PROJECT_SOURCE_DIR}/infra/cmake/modules/${PREFIX}.cmake")
+#endmacro(nnas_include)
+#
+#macro(nnas_find_package PREFIX)
+#  find_package(${PREFIX} CONFIG NO_DEFAULT_PATH
+#    PATHS ${NNAS_PROJECT_SOURCE_DIR}/infra/cmake/packages
+#    ${ARGN}
+#  )
+#endmacro(nnas_find_package)
+#
+## nncc_find_resource(NAME) will update the following variables
+##
+##   NAME_FOUND
+##   NAME_DIR
+##
+## TODO Explain how to add a resource in README.md
+#function(nncc_find_resource NAME)
+#  set(RESOURCE_DIR "${NNAS_PROJECT_SOURCE_DIR}/res/${NAME}")
+#
+#  if(NOT IS_DIRECTORY ${RESOURCE_DIR})
+#    set(${NAME}_FOUND FALSE PARENT_SCOPE)
+#    return()
+#  endif(NOT IS_DIRECTORY ${RESOURCE_DIR})
+#
+#  set(${NAME}_DIR ${RESOURCE_DIR} PARENT_SCOPE)
+#  set(${NAME}_FOUND TRUE PARENT_SCOPE)
+#endfunction(nncc_find_resource)
+#
+####
+#### CMake configuration
+####
+#if(NOT CMAKE_BUILD_TYPE)
+#  set(CMAKE_BUILD_TYPE "Debug" CACHE STRING "Type of build" FORCE)
+#endif(NOT CMAKE_BUILD_TYPE)
+#message(STATUS "Use '${CMAKE_BUILD_TYPE}' configuration")
+#
+## Prefer -pthread to -lpthread for find_package(Threads ...)
+##
+## std::thread code compiled only with -lpthread emits the following runtime error (on GCC 4.8.4)
+##
+##   terminate called after throwing an instance of 'std::system_error'
+##     what():  Enable multithreading to use std::thread: Operation not permitted
+##
+#set(THREADS_PREFER_PTHREAD_FLAG TRUE)
+#
+####
+#### Configuration
+####
+#option(DOWNLOAD_PROTOBUF "Download Protocol Buffer source" ON)
+#option(BUILD_PROTOBUF "Locally build Protocol Buffer from the downloaded source" ON)
+#option(DOWNLOAD_EIGEN "Download Eigen source" ON)
+#option(DOWNLOAD_FARMHASH "Download farmhash source" ON)
+#option(DOWNLOAD_GEMMLOWP "Download GEMM low precesion library source" ON)
+#option(DOWNLOAD_RUY "Download ruy source" ON)
+#option(DOWNLOAD_NEON2SSE "Download NEON2SSE library source" ON)
+#option(DOWNLOAD_GFLAGS "Download GFlags source" OFF)
+#option(DOWNLOAD_FLATBUFFERS "Download FlatBuffers source" ON)
+#option(BUILD_FLATBUFFERS "Locally build Flatbuffers from the downloaded source" ON)
+#option(DOWNLOAD_TENSORFLOW "Download TensorFlow source" ON)
+#option(DOWNLOAD_CAFFE "Download Caffe source" ON)
+#option(DOWNLOAD_PYTORCH "Download Pytorch source" ON)
+#option(DOWNLOAD_ONNX "Download ONNX source" ON)
+#option(DOWNLOAD_ABSEIL "Download Abseil-cpp source" ON)
+#option(DOWNLOAD_OPENCL_HEADERS "Download OpenCl Header source" ON)
+#option(DOWNLOAD_PYBIND11 "Download Pybind11 source" ON)
+#
+#option(DOWNLOAD_GTEST "Download Google Test source" ON)
+#option(BUILD_GTEST "Build Google Test from the downloaded source" ON)
+#option(DOWNLOAD_HDF5 "Download HDF5 source" ON)
+#option(BUILD_HDF5 "Build HDF5 from the downloaded source" ON)
+#
+#nnas_find_package(GTest QUIET)
+#
+#option(ENABLE_TEST "Build Tests using Google Test" ${GTest_FOUND})
+#
+#if(${ENABLE_TEST} AND NOT ${GTest_FOUND})
+#  message(FATAL_ERROR "Google Test is required to enable test")
+#endif(${ENABLE_TEST} AND NOT ${GTest_FOUND})
+#
+#option(ENABLE_COVERAGE "Build for coverage test" OFF)
+#if(${ENABLE_COVERAGE} AND NOT ${ENABLE_TEST})
+#  message(FATAL_ERROR "Test should be enabled to measure test coverage")
+#endif(${ENABLE_COVERAGE} AND NOT ${ENABLE_TEST})
+#
+#if(${ENABLE_TEST})
+#  include(CTest)
+#endif(${ENABLE_TEST})
+#
+#option(ENABLE_STRICT_BUILD "Treat warning as error" OFF)
+#
+## This option might be turned ON for Windows native build.
+## Check our ProtobufConfig.cmake for its usage.
+#option(USE_PROTOBUF_LEGACY_IMPORT "Use legacy MODULE mode import rather than CONFIG mode" OFF)
+#
+####
+#### Target
+####
 add_library(nncc_common INTERFACE)
-if(ENABLE_STRICT_BUILD)
-  # TODO Remove -Wno-reoder
-  target_compile_options(nncc_common INTERFACE -Werror -Wall -Wextra -Wno-reorder)
-endif(ENABLE_STRICT_BUILD)
-
+#if(ENABLE_STRICT_BUILD)
+#  # TODO Remove -Wno-reoder
+#  target_compile_options(nncc_common INTERFACE -Werror -Wall -Wextra -Wno-reorder)
+#endif(ENABLE_STRICT_BUILD)
+#
 add_library(nncc_coverage INTERFACE)
-if(ENABLE_COVERAGE)
-  target_compile_options(nncc_coverage INTERFACE -g -O0 -fprofile-arcs -ftest-coverage)
-  target_link_libraries(nncc_coverage INTERFACE gcov)
-endif(ENABLE_COVERAGE)
-
-###
-### Function
-###
-# TODO Remove this nnas_include
-nnas_include(OptionalTargetTools)
-nnas_include(AddSubdirectories)
-
-add_subdirectory("${NNAS_PROJECT_SOURCE_DIR}/compiler" "${CMAKE_BINARY_DIR}/compiler")
+#if(ENABLE_COVERAGE)
+#  target_compile_options(nncc_coverage INTERFACE -g -O0 -fprofile-arcs -ftest-coverage)
+#  target_link_libraries(nncc_coverage INTERFACE gcov)
+#endif(ENABLE_COVERAGE)
+#
+####
+#### Function
+####
+## TODO Remove this nnas_include
+#nnas_include(OptionalTargetTools)
+#nnas_include(AddSubdirectories)
+#
+#add_subdirectory("${NNAS_PROJECT_SOURCE_DIR}/compiler" "${CMAKE_BINARY_DIR}/compiler")
